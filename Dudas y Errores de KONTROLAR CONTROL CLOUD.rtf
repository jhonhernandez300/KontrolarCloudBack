{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang3082{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil Cascadia Mono;}{\f2\fnil\fcharset0 Cascadia Mono;}{\f3\fnil Consolas;}}
{\colortbl ;\red0\green0\blue0;\red255\green255\blue0;\red46\green117\blue182;\red163\green21\blue21;\red0\green128\blue0;\red0\green0\blue255;\red128\green128\blue128;}
{\*\generator Riched20 10.0.22621}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\qc\f0\fs36\lang10 Dudas y Errores de KONTROLAR CONTROL CLOUD\fs22\par

\pard\sl240\slmult1 1\par
///////////////////////////////////         1\par
\par
\b A veces es necesario para que EF sepa como son las relaciones\par
modelBuilder, pk, clave primaria, relaci\'f3n uno a muchos\b0\par
\cf1\fs19 protected override void OnModelCreating(ModelBuilder modelBuilder)\par
\{\par
    modelBuilder.Entity<UserCompany>()\par
        .HasOne(uc => uc.User)\par
        .WithMany(u => u.UserCompanies)\par
        .HasForeignKey(uc => uc.IdUser);\par
\par
    modelBuilder.Entity<UserCompany>()\par
        .HasOne(uc => uc.Company)\par
        .WithMany(c => c.UserCompanies)\par
        .HasForeignKey(uc => uc.IdCompany);\par
\par
    base.OnModelCreating(modelBuilder);\par
\}\par
\par
[Table("MT_UsersCompanies")]\par
public class UserCompany\par
\{\par
    [Key]\par
    public int IdUserCompany \{ get; set; \}\par
    public required int IdUser \{ get; set; \}\b\par
    public required int IdCompany \{ get; set; \}\par
\b0\par
    public User? User \{ get; set; \}\par
    \b public Company? Company \{ get; set; \}\b0\par
\}\par
\par
[Table("MT_Companies")]\par
public class Company\par
\{\par
    [Key]\par
    public int IdCompany \{ get; set; \}\par
    public required string CompanyName \{ get; set; \}\par
    public required string DB \{ get; set; \}\par
    public required string UserName \{ get; set; \}\par
    public required string CompanyPassword \{ get; set; \}\par
    public required DateTime LicenseValidDate \{ get; set; \}\par
    public required int ConnectionsSimultaneousNumber \{ get; set; \}\par
\par
    \b public ICollection<UserCompany> UserCompanies \{ get; set; \} = new List<UserCompany>();\b0\par
\}\par
\par
\lang9226 /////////////////////////////      1\par
\par
\b Agregar un registro usando la tabla que guarda el \'faltimo id\par
\b0 [HttpPost("Add")]\par
public IActionResult Add([FromBody] User user)\par
\{\par
    try\par
    \{\par
        if (user == null)\par
        \{\par
            return BadRequest(Json("Datos inv\'e1lidos del user"));\par
        \}\par
\par
        // Consultar el \'faltimo ID usado para la tabla User\par
        var lastIdRecord = _unitOfWork.LastIds.GetBigger("MT_Users");\par
\par
        if (lastIdRecord == null)\par
        \{\par
            return StatusCode(500, Json("No se encontr\'f3 un registro de Last (id) para la tabla User"));\par
        \}\par
\par
        int newUserId = lastIdRecord.Last + 1;\par
        user.IdUser = newUserId;\par
\par
        var nuevoUser = _unitOfWork.Users.Add(user);\par
        _unitOfWork.Complete();\par
\par
        // Actualizar el modelo LastId con el nuevo ID\par
        lastIdRecord.Last = newUserId;\par
        _unitOfWork.LastIds.Update(lastIdRecord);\par
        _unitOfWork.Complete();\par
\par
        return Ok(Json(nuevoUser));\par
    \}\par
    catch (Exception ex)\par
    \{\par
        return StatusCode(500, Json($"Error interno del servidor: \{ex.Message\}"));\par
  \}\par
\}           \par
\par
/////////////////////////////\par
\par
\b Al preguntarle a ChatGPT \b0 incluir Program.cs para que \'e9l pueda mirar la inyecci\'f3n de dependencias\par
\cf0\fs22\lang10\par
\cf1\fs19\lang9226 /////////////////////////////\par
\par
\cf0\b\fs22\lang10 C\'f3mo crear un acci\'f3n en el controlador que use un SP\par
\cf1\b0\fs19 public interface \b ICompanyRepository \b0 : IBaseRepository<Company>\par
\{\par
    Task<List<Company>> \ul GetCompaniesByDocumentNumber\ulnone (string documentNumber);\par
\}\par
\par
 public interface \highlight2 IUnitOfWork \highlight0 : IDisposable\par
 \{\par
     //IBaseRepository<Company> Companies \{ get; \}\par
     ICompanyRepository Companies \{ get; \}\par
     IBaseRepository<User> Users \{ get; \}\par
        \par
     IUserCompanyRepository UsersCompanies \{ get; \}\par
     ILastIdRepository LastIds \{ get; \}\par
\par
     int Complete();\par
 \}\par
\par
public class CompanyRepository : BaseRepository<Company>, \b ICompanyRepository\b0\par
\{\par
    private readonly ApplicationDbContext _context;\par
\par
    public CompanyRepository(ApplicationDbContext context) : base(context)\par
    \{\par
        _context = context;\par
    \}\par
\par
    //Este m\'e9todo es distinto por que usa un SP en lugar de EF\par
    public async Task<List<Company>> \ul GetCompaniesByDocumentNumber\ulnone (string documentNumber)\par
    \{\par
        var companies = new List<Company>();\par
\par
        var conn = _context.Database.GetDbConnection();\par
        try\par
        \{\par
            await conn.OpenAsync();\par
\par
            using (var command = conn.CreateCommand())\par
            \{\par
                command.CommandText = "GetCompaniesByDocumentNumber";\par
                command.CommandType = CommandType.StoredProcedure;\par
\par
                var param = command.CreateParameter();\par
                param.ParameterName = "@DocumentNumber";\par
                param.Value = documentNumber;\par
                command.Parameters.Add(param);\par
\par
                using (var reader = await command.ExecuteReaderAsync())\par
                \{\par
                    while (await reader.ReadAsync())\par
                    \{\par
                        companies.Add(new Company\par
                        \{\par
                            IdCompany = reader.GetInt32(0),\par
                            CompanyName = reader.GetString(1),\par
                            DB = reader.GetString(2),\par
                            UserName = reader.GetString(3),\par
                            CompanyPassword = reader.GetString(4),\par
                            LicenseValidDate = reader.GetDateTime(5),\par
                            ConectionsSimultaneousNumber = reader.GetInt32(6)\par
                        \});\par
                    \}\par
                \}\par
            \}\par
        \}\par
        finally\par
        \{\par
            await conn.CloseAsync();\par
        \}\par
\par
        return companies;\par
    \}\par
\}\par
\par
public class UnitOfWork : \highlight2 IUnitOfWork\highlight0\par
\{\par
    private readonly ApplicationDbContext _context;\par
\par
    public UnitOfWork(ApplicationDbContext context,\par
                      //IBaseRepository<Company> companies,\par
                      ICompanyRepository companies,\par
                      IBaseRepository<User> users,\par
                      IUserCompanyRepository usersCompanies,\par
                      ILastIdRepository lastIds)\par
    \{\par
        _context = context;\par
        Companies = companies;\par
        Users = users;\par
        UsersCompanies = usersCompanies;\par
        LastIds = lastIds;\par
    \}\par
\par
    //public IBaseRepository<Company> Companies \{ get; private set; \}\par
    public ICompanyRepository Companies \{ get; private set; \}\par
    public IBaseRepository<User> Users \{ get; private set; \}        \par
    public IUserCompanyRepository UsersCompanies \{ get; private set; \}\par
    public ILastIdRepository LastIds \{ get; private set; \}\par
\par
    public int Complete()\par
    \{\par
        return _context.SaveChanges();\par
    \}\par
\par
    public void Dispose()\par
    \{\par
        _context.Dispose();\par
    \}\par
\}\par
\par
[HttpGet("\ul GetCompaniesByDocumentNumber\ulnone /\{documentNumber\}")]\par
public async Task<IActionResult> \ul GetCompaniesByDocumentNumber\ulnone (string documentNumber)\par
\{\par
    try\par
    \{\par
        var companies = await _unitOfWork.Companies.\ul GetCompaniesByDocumentNumber\ulnone (documentNumber);\par
\par
        if (companies == null || !companies.Any())\par
        \{\par
            return NotFound("No se encontraron compa\'f1\'edas para el n\'famero de documento proporcionado.");\par
        \}\par
\par
        return Ok(companies);\par
    \}\par
    catch (Exception ex)\par
    \{\par
        return StatusCode(500, $"Error interno del servidor: \{ex.Message\}");\par
    \}\par
\}\par
\par
Program.cs\par
//builder.Services.AddTransient<IUnitOfWork, UnitOfWork>();\par
builder.Services.AddScoped<\highlight2 IUnitOfWork\highlight0 , UnitOfWork>();\par
builder.Services.AddScoped<ICompanyRepository, CompanyRepository>();\par
builder.Services.AddScoped<IBaseRepository<Company>, BaseRepository<Company>>();\par
builder.Services.AddScoped<IBaseRepository<User>, BaseRepository<User>>();\par
//builder.Services.AddScoped<IBaseRepository<UserCompany>, BaseRepository<UserCompany>>();\par
builder.Services.AddScoped<IUserCompanyRepository, UserCompanyRepository>();\par
builder.Services.AddScoped<ILastIdRepository, LastIdRepository>();\cf0\fs22\par
\par
\cf1\fs19\lang9226 /////////////////////////////\par
\par
\b Encriptar - desencriptar\b0\par
using System.Security.Cryptography;\par
\par
namespace Core.Utils\par
\{\par
    public static class CryptoHelper\par
    \{\par
        private static readonly string Key = "1234567890123456"; // 16 bytes\par
        private static readonly string Iv = "1234567890123456"; // 16 bytes\par
\par
        public static string \b Decrypt\b0 (string encryptedData)\par
        \{\par
            byte[] cipherBytes = Convert.FromBase64String(encryptedData);\par
\par
            using (Aes aesAlg = Aes.Create())\par
            \{\par
                aesAlg.Key = Encoding.UTF8.GetBytes(Key);\par
                aesAlg.IV = Encoding.UTF8.GetBytes(Iv);\par
                aesAlg.Mode = CipherMode.CBC;\par
                aesAlg.Padding = PaddingMode.PKCS7;\par
\par
                ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);\par
\par
                using (MemoryStream msDecrypt = new MemoryStream(cipherBytes))\par
                \{\par
                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))\par
                    \{\par
                        using (StreamReader srDecrypt = new StreamReader(csDecrypt))\par
                        \{\par
                            return srDecrypt.ReadToEnd();\par
                        \}\par
                    \}\par
                \}\par
            \}\par
        \}\par
\par
        public static string Encrypt(string plainText)\par
        \{\par
            byte[] plainBytes = Encoding.UTF8.GetBytes(plainText);\par
\par
            using (Aes aesAlg = Aes.Create())\par
            \{\par
                aesAlg.Key = Encoding.UTF8.GetBytes(Key);\par
                aesAlg.IV = Encoding.UTF8.GetBytes(Iv);\par
                aesAlg.Mode = CipherMode.CBC;\par
                aesAlg.Padding = PaddingMode.PKCS7;\par
\par
                ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\par
\par
                using (MemoryStream msEncrypt = new MemoryStream())\par
                \{\par
                    using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\par
                    \{\par
                        csEncrypt.Write(plainBytes, 0, plainBytes.Length);\par
                        csEncrypt.FlushFinalBlock();\par
                        return Convert.ToBase64String(msEncrypt.ToArray());\par
                    \}\par
                \}\par
            \}\par
        \}\par
    \}\par
\}\par
\par
En la acci\'f3n del controlador:\par
using Newtonsoft.Json; (Instalar el paq)\par
\par
[HttpGet("GetCompaniesByDocumentNumber/\{encryptedDocumentNumber\}")]\par
public async Task<IActionResult> GetCompaniesByDocumentNumber(string encryptedDocumentNumber)\par
\{\par
    try\par
    \{\par
        encryptedDocumentNumber = Uri.UnescapeDataString(encryptedDocumentNumber);\par
        // Verificar si encryptedDocumentNumber es una cadena Base64 v\'e1lida\par
        byte[] encryptedBytes;\par
        try\par
        \{\par
            encryptedBytes = Convert.FromBase64String(encryptedDocumentNumber);\par
        \}\par
        catch (FormatException)\par
        \{\par
            return BadRequest("La cadena proporcionada no es una cadena Base64 v\'e1lida.");\par
        \}\par
\par
        var documentNumber = CryptoHelper.\b Decrypt\b0 (encryptedDocumentNumber);   \par
        documentNumber = StringHelper.EliminateFirstAndLast(documentNumber); \par
        var companies = await _unitOfWork.Companies.GetCompaniesByDocumentNumber(documentNumber);\par
\par
        if (companies == null || !companies.Any())\par
        \{\par
            return NotFound("No se encontraron compa\'f1\'edas para el n\'famero de documento proporcionado.");\par
        \}\par
\par
        var companiesJson = JsonConvert.SerializeObject(companies);\par
        var encryptedData = CryptoHelper.Encrypt(companiesJson);\par
\par
        return Ok(encryptedData);\par
    \}\par
    catch (Exception ex)\par
    \{\par
        return StatusCode(500, $"Error interno del servidor: \{ex.Message\} - StackTrace: \{ex.StackTrace\}");\par
    \}\par
\}\par
\f1\par
\f2 ////////////////////\par
\par
\b\f0 Como adicionar un par\'e1metro de salida\par
\b0 En la bd\par
ALTER PROCEDURE GetCompaniesByDocumentNumber\par
    @DocumentNumber NVARCHAR(100),\par
    @UserNotFound BIT OUTPUT\par
AS\par
BEGIN\par
    SET @UserNotFound = 0;\par
\par
    BEGIN TRY        \par
        DECLARE @IdUser INT;\par
\par
        -- Validar si el DocumentNumber existe\par
        SELECT @IdUser = IdUser \par
        FROM dbo.MT_Users \par
        WHERE DocumentNumber = @DocumentNumber;\par
        \par
        IF @IdUser IS NULL\par
        BEGIN\par
            SET @UserNotFound = 1;\par
            RETURN;\par
        END\par
\par
        -- Si existe, seleccionar las compa\'f1\'edas relacionadas\par
        SELECT c.IdCompany, \par
               c.CompanyName, \par
               c.DB, \par
               c.UserName, \par
               c.CompanyPassword, \par
               c.LicenseValidDate, \par
               c.ConnectionsSimultaneousNumber\par
        FROM dbo.MT_Companies c\par
        INNER JOIN dbo.MT_UsersCompanies uc ON c.IdCompany = uc.IdCompany\par
        WHERE uc.IdUser = @IdUser;\par
    END TRY\par
    BEGIN CATCH\par
        -- Manejo de excepciones\par
        DECLARE @ErrorMessage NVARCHAR(4000);\par
        DECLARE @ErrorSeverity INT;\par
        DECLARE @ErrorState INT;\par
\par
        SELECT \par
            @ErrorMessage = ERROR_MESSAGE(),\par
            @ErrorSeverity = ERROR_SEVERITY(),\par
            @ErrorState = ERROR_STATE();\par
\par
        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);\par
    END CATCH\par
END;\par
\par
En CompanyRepository:\par
public async Task<(List<Company> companies, bool userNotFound)> GetCompaniesByDocumentNumber(string documentNumber)\par
\{\par
    var companies = new List<Company>();\par
    bool userNotFound = false;\par
\par
    var conn = _context.Database.GetDbConnection();\par
    try\par
    \{\par
        await conn.OpenAsync();\par
        Console.WriteLine("Database connection opened.");\par
\par
        using (var command = conn.CreateCommand())\par
        \{\par
            command.CommandText = "GetCompaniesByDocumentNumber";\par
            command.CommandType = CommandType.StoredProcedure;\par
\par
            var param = command.CreateParameter();\par
            param.ParameterName = "@DocumentNumber";\par
            param.Value = documentNumber;\par
            command.Parameters.Add(param);\par
\par
            var userNotFoundParam = command.CreateParameter();\par
            userNotFoundParam.ParameterName = "@UserNotFound";\par
            userNotFoundParam.DbType = DbType.Boolean;\par
            userNotFoundParam.Direction = ParameterDirection.Output;\par
            command.Parameters.Add(userNotFoundParam);\par
\par
            Console.WriteLine($"Executing stored procedure with DocumentNumber: \{documentNumber\}");\par
\par
            using (var reader = await command.ExecuteReaderAsync())\par
            \{\par
                while (await reader.ReadAsync())\par
                \{\par
                    companies.Add(new Company\par
                    \{\par
                        IdCompany = reader.GetInt32(0),\par
                        CompanyName = reader.GetString(1),\par
                        DB = reader.GetString(2),\par
                        UserName = reader.GetString(3),\par
                        CompanyPassword = reader.GetString(4),\par
                        LicenseValidDate = reader.GetDateTime(5),\par
                        ConnectionsSimultaneousNumber = reader.GetInt32(6)\par
                    \});\par
                \}\par
            \}\par
\par
            userNotFound = (bool)userNotFoundParam.Value;\par
        \}\par
\par
        Console.WriteLine("Stored procedure executed successfully.");\par
    \}\par
    catch (Exception ex)\par
    \{\par
        Console.WriteLine($"Error executing stored procedure: \{ex.Message\}");\par
        throw;\par
    \}\par
    finally\par
    \{\par
        await conn.CloseAsync();\par
        Console.WriteLine("Database connection closed.");\par
    \}\par
\par
    return (companies, userNotFound);\par
\}\par
\par
En el controlador:\par
[HttpGet("GetCompaniesByDocumentNumber/\{encryptedDocumentNumber\}")]\par
public async Task<IActionResult> GetCompaniesByDocumentNumber(string encryptedDocumentNumber)\par
\{\par
    try\par
    \{\par
        encryptedDocumentNumber = Uri.UnescapeDataString(encryptedDocumentNumber);\par
        // Verificar si encryptedDocumentNumber es una cadena Base64 v\'e1lida\par
        byte[] encryptedBytes;\par
        try\par
        \{\par
            encryptedBytes = Convert.FromBase64String(encryptedDocumentNumber);\par
        \}\par
        catch (FormatException)\par
        \{\par
            return BadRequest("La cadena proporcionada no es una cadena Base64 v\'e1lida.");\par
        \}\par
\par
        var documentNumber = CryptoHelper.Decrypt(encryptedDocumentNumber);   \par
        documentNumber = StringHelper.EliminateFirstAndLast(documentNumber); \par
        var (companies, userNotFound) = await _unitOfWork.Companies.GetCompaniesByDocumentNumber(documentNumber);\par
\par
        if (userNotFound)\par
        \{\par
            return NotFound("No se encontraron compa\'f1\'edas para el n\'famero de documento proporcionado.");\par
        \}\par
\par
        var companiesJson = JsonConvert.SerializeObject(companies);\par
        var encryptedData = CryptoHelper.Encrypt(companiesJson);\par
\par
        return Ok(encryptedData);\par
    \}\par
    catch (Exception ex)\par
    \{\par
        return StatusCode(500, $"Error interno del servidor: \{ex.Message\} - StackTrace: \{ex.StackTrace\}");\par
    \}\par
\}\par
\par
En ICompanyRepository\par
 Task<(List<Company> companies, bool userNotFound)> GetCompaniesByDocumentNumber(string documentNumber);\par
\cf0\fs22\lang10\par
\cf1\fs19\lang9226 /////////////////////////////\par
\par
\b C\'f3mo implementar el token\par
\b0 En la carpeta Utils:\par
public class Jwt\par
\{\par
    public required string Key \{ get; set; \}\par
    public required string Issuer \{ get; set; \}\par
    public required string Audience \{ get; set; \}\par
    public required string Subject \{ get; set; \}\par
                \par
    public static dynamic CheckToken(ClaimsIdentity identity, ApplicationDbContext context)\par
    \{\par
        try\par
        \{            \par
            if (identity.Claims.Count() == 0)\par
            \{\par
                return new\par
                \{\par
                    success = false,\par
                    message = "Token no v\'e1lido",\par
                    result = ""\par
                \};\par
            \}\par
\par
            var id = identity.Claims.FirstOrDefault(x => x.Type == "id").Value;\par
            //Usuario usuario = Usuario.DB().FirstOrDefault(x => x.idUsuario == id);\par
\par
            User company = context.Users\par
                .Where(x => x.IdUser.ToString() == id)\par
                .FirstOrDefault();\par
\par
            return new\par
            \{\par
                success = true,\par
                message = "exito",                    \par
                result = company\par
            \};\par
        \}\par
        catch (Exception ex) \par
        \{\par
            return new\par
            \{\par
                success = false,\par
                message = "Catch: " + ex.Message,\par
                result = ""\par
            \};\par
        \}\par
    \}\par
\}\par
\par
\f2 En Program.cs:\par
\f1 builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\par
    .AddJwtBearer(options => \{\par
        IConfiguration configuration = builder.Configuration;\par
\par
        if (configuration != null)\par
        \{\par
            options.TokenValidationParameters = new Microsoft.IdentityModel.Tokens.TokenValidationParameters\par
            \{\par
                ValidateIssuer = true,\par
                ValidateAudience = true,\par
                ValidateLifetime = true,\par
                ValidateIssuerSigningKey = true,\par
                ValidIssuer = configuration["Jwt:Issuer"],\par
                ValidAudience = configuration["Jwt:Audience"],\par
                IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(configuration["Jwt:Key"]))\par
            \};\par
        \}\par
        else\par
        \{\par
            throw new InvalidOperationException("Configuration is null.");\par
        \}\par
    \});\par
\par
builder.Services.AddHttpContextAccessor();\par
\par
\f2 En appsettings:\par
\cf3\f1 "AllowedHosts"\cf1 : \cf4 "*"\cf1 ,\par
\cf3 "Jwt"\cf1 : \{\par
  \cf5 //"key": "softwareLion123.@",\par
\cf1   \cf3 "key"\cf1 : \cf4 "ColombiaLeGanaAArgentina1234567890"\cf1 ,\par
  \cf3 "Issuer"\cf1 : \cf4 "{\cf0{\field{\*\fldinst{HYPERLINK https://localhost:7202/ }}{\fldrslt{https://localhost:7202/\ul0\cf0}}}}\f1\fs19 "\cf1 ,\par
  \cf3 "Audience"\cf1 : \cf4 "{\cf0{\field{\*\fldinst{HYPERLINK https://localhost:7202/ }}{\fldrslt{https://localhost:7202/\ul0\cf0}}}}\f1\fs19 "\cf1 ,\par
  \cf3 "Subject"\cf1 : \cf4 "baseWebApiSubject"\par
\cf1\},\par
\par
\f2 En el controlador:\par
\f1 [HttpGet]  \par
[Route("CreateToken/\{encryptedDocumentNumber\}/\{encryptedIdCompany\}")]\par
//public dynamic CreateToken()\par
public dynamic CreateToken(string encryptedDocumentNumber, string encryptedIdCompany)\par
\{\par
    var documentNumber = CryptoHelper.Decrypt(encryptedDocumentNumber);\par
    documentNumber = StringHelper.EliminateFirstAndLast(documentNumber);\par
\par
    var idCompany = CryptoHelper.Decrypt(encryptedIdCompany);\par
    idCompany = StringHelper.EliminateFirstAndLast(idCompany);\par
\par
    try\par
    \{\par
        var jwt = _configuration.GetSection("Jwt")\par
            .Get<Jwt>();\par
\par
        var claims = new[]\par
        \{\par
            new Claim(JwtRegisteredClaimNames.Sub, jwt.Subject),\par
            new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),\par
            new Claim(JwtRegisteredClaimNames.Iat, DateTime.UtcNow.ToString()),\par
            new Claim("idCompany", idCompany),\par
            new Claim("documentNumber", documentNumber)\par
        \};\par
\par
        var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwt.Key));\par
        var singIng = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);\par
\par
        var token = new JwtSecurityToken(\par
                jwt.Issuer,\par
                jwt.Audience,\par
                claims,\par
                expires: DateTime.Now.AddMinutes(20),\par
                signingCredentials: singIng\par
        );\par
\par
        var response = new JwtSecurityTokenHandler().WriteToken(token);\par
\par
        var tokenJson = JsonConvert.SerializeObject(response);\par
        var encryptedToken = CryptoHelper.Encrypt(tokenJson);\par
\par
        return encryptedToken;\par
    \}\par
    catch (Exception ex)\par
    \{\par
        return ex.Message;\par
    \}\par
\}\par
\par
\f2 Paquetes instalados:\par
Microsoft.EntityFrameworkCore.Design\par
En KontrolarCloud\par
Microsoft.AspNetCore.Authentication.JwtBearer\f0\par
\cf0\fs22\lang10\par
\cf1\fs19\lang9226 /////////////////////////////\par
\par
\b Como implementar DTOs con automapper\par
\b0 Usando Librer\'edas (Automapper)\par
Automapper es una librer\'eda popular para mapear autom\'e1ticamente entre entidades y DTOs, lo que puede hacer tu c\'f3digo m\'e1s limpio y menos propenso a errores.\par
\par
2.1 Instalar Automapper\par
Primero, instala el paquete Automapper a trav\'e9s de NuGet:\par
\par
bash\par
Copiar c\'f3digo\par
dotnet add package AutoMapper\par
2.2 Configurar Automapper\par
Crea un perfil de mapeo para configurar c\'f3mo se deben mapear las entidades a DTOs:\par
\par
csharp\par
Copiar c\'f3digo\par
public class MappingProfile : Profile\par
\{\par
    public MappingProfile()\par
    \{\par
        CreateMap<User, UserDTO>();\par
        // Puedes agregar m\'e1s mapeos aqu\'ed\par
    \}\par
\}\par
Luego, configura Automapper en Startup.cs:\par
\par
csharp\par
Copiar c\'f3digo\par
public void ConfigureServices(IServiceCollection services)\par
\{\par
    services.AddAutoMapper(typeof(Startup));\par
    // Otras configuraciones\par
\}\par
2.3 Usar Automapper en los Controladores\par
Inyecta IMapper en tus controladores y usa el mapeo:\par
\par
csharp\par
Copiar c\'f3digo\par
private readonly IMapper _mapper;\par
\par
public UsersController(IMapper mapper)\par
\{\par
    _mapper = mapper;\par
\}\par
\par
[HttpGet("\{id\}")]\par
public async Task<IActionResult> GetUser(int id)\par
\{\par
    var user = await _context.Users.FindAsync(id);\par
    if (user == null)\par
    \{\par
        return NotFound();\par
    \}\par
\par
    var userDTO = _mapper.Map<UserDTO>(user);\par
    return Ok(userDTO);\par
\}\par
\par
/////////////////////////////\par
\par
\b Poner otro context para usar 2 bases de datos\par
\b0\f1  public interface ILastIdsKTRL2Repository : IBaseRepository<LastIdsKTRL2>\par
 \{\par
     LastIdsKTRL2 GetBigger(string tableName);\par
     Task<LastIdsKTRL2> GetBiggerAsync(string tableName);\par
 \}\par
\par
 [Table("MT_LastIdsKTRL2")]\par
 public class LastIdsKTRL2\par
 \{\par
     [Key]\par
     public int IdLastIdsKTRL2 \{ get; set; \}\par
     public required string TableName \{ get; set; \}\par
     public required long Last \{ get; set; \}\par
 \}\par
\par
\f2 En IUnitOfWork\par
\f1 ILastIdsKTRL2Repository LastIdsKTRL2 \{ get; \}\par
\par
public class SecondaryBaseRepository<T> : IBaseRepository<T> where T : class\par
\{\par
       \par
    protected SecondaryDbContext _context;\par
\par
    public SecondaryBaseRepository(SecondaryDbContext context)\par
    \{\par
        _context = context;\par
    \}\par
\par
    public IEnumerable<T> GetAll()\par
    \{\par
        return _context.Set<T>().ToList();\par
    \}\par
\f0 contin\'faa como el BaseRepository\par
\par
\f1 public class \b SecondaryDbContext \b0 : DbContext\par
\{\par
    public SecondaryDbContext(DbContextOptions<SecondaryDbContext> options) : base(options)\par
    \{\par
    \}\par
\par
    public DbSet<UserProfile> UsersProfiles \{ get; set; \}\par
    public DbSet<Profile> Profiles \{ get; set; \}\par
    public DbSet<OptionProfile> OptionsProfiles \{ get; set; \}\par
    public DbSet<Option> Options \{ get; set; \}\par
    public DbSet<Module> Modules \{ get; set; \}\par
    public DbSet<LastIdsKTRL2> LastIdsKTRL2 \{ get; set; \}\par
\par
    protected override void OnModelCreating(ModelBuilder modelBuilder)\par
    \{\par
        modelBuilder.Entity<UserProfile>()\par
           .HasOne(uc => uc.User)\par
           .WithMany(u => u.UsersProfiles)\par
           .HasForeignKey(uc => uc.IdUser);\par
\f2 ...\par
\par
\f1 public class \b UnitOfWork \b0 : IUnitOfWork\par
\{\par
    private readonly ApplicationDbContext _context;\par
    private readonly SecondaryDbContext _secondaryContext;\par
\par
    public UnitOfWork(\par
\f2\tab\f1 ILastIdsKTRL2Repository lastIdsKTRL2,\par
\f2 )\par
\{\par
\f1 LastIdsKTRL2 = lastIdsKTRL2;\par
\f2\}\par
\f1 public ILastIdsKTRL2Repository LastIdsKTRL2 \{ get; private set; \}\par
\par
public int Complete()\par
\{\par
    return _context.SaveChanges() + _secondaryContext.SaveChanges();\par
\}\par
\par
public async Task<int> CompleteAsync()\par
\{\par
    var primaryResult = await _context.SaveChangesAsync();\par
    var secondaryResult = await _secondaryContext.SaveChangesAsync();\par
    return primaryResult + secondaryResult;\par
\}\par
\par
public void Dispose()\par
\{\par
    _context.Dispose();\par
    _secondaryContext.Dispose();\par
\}\f0\par
\cf0\fs22\lang10\par
\cf1\fs19\lang9226 /////////////////////////////\par
\par
\cf0\b\fs22\lang10 Implementar y usar automapper\par
DTO DTOs\par
\b0 Instalar automapper en el proyecto que tiene el controlador\par
\par
Crear las carpetas DTOs y Mapping\par
\par
En Mapping:\par
\cf1\f1\fs19 using AutoMapper;\par
using Core.Models;\par
using KontrolarCloud.DTOs;\par
\par
namespace KontrolarCloud.Mapping\par
\{\par
    public class MappingProfile : AutoMapper.Profile\par
    \{\par
        public MappingProfile()\par
        \{\par
            CreateMap< Core.Models.Profile, ProfileDTO>().ReverseMap();\par
        \}\par
    \}\par
\}\par
\par
\f2\lang9226 El DTOs\par
\f1  public class ProfileDTO\par
 \{\par
     public int IdProfile \{ get; set; \}\par
     public string CodProfile \{ get; set; \}\par
     public string NameProfile \{ get; set; \}\par
     public string Description \{ get; set; \}\par
 \}\par
\par
\f2 En Program.cs\par
\f1 using AutoMapper;\par
using KontrolarCloud.Mapping;\par
\par
builder.Services.AddHttpContextAccessor();\f2  //Despu\'e9s de esto\par
\f1\par
builder.Services.AddAutoMapper(typeof(MappingProfile));\par
\par
\f2 En el controlador\par
\f1 public async Task<IActionResult> AddAsync([FromBody] ProfileDTO profileDTO)\par
\{\par
    try\par
    \{\par
        if (profileDTO == null)\par
        \{\par
            return BadRequest(Json("Datos inv\f2\'e1lidos del profile"));\par
        \}\par
\par
        var profile = _mapper.Map<Core.Models.Profile>(profileDTO); \f1\par
\cf0\f0\fs22\lang10\par
\par
\cf1\fs19\lang9226 /////////////////////////////\par
\par
\b Agregar un campo a una tabla SQL\b0\par
\cf6\f3 ALTER\cf1  \cf6 TABLE\cf1  [dbo]\cf7 .\cf1 [MT_Profiles]\par
\cf6 ADD\cf1  IsDisabled \cf6 bit\cf7 ;\cf1\par
\f0\par
/////////////////////////////\par
\par
\b Agregar un valor por defecto para un campo SQL\b0\par
\cf6\f3 ALTER\cf1  \cf6 TABLE\cf1  [dbo]\cf7 .\cf1 [MT_Profiles]\par
\cf6 ADD\cf1  \cf6 CONSTRAINT\cf1  DF_MT_Profiles_IsDisabled \cf6 DEFAULT\cf1  0 \cf6 FOR\cf1  IsDisabled\cf7 ;\cf1\f0\par
\cf0\fs22\lang10\par
\cf1\fs19\lang9226 /////////////////////////////\par
\par
\b Crear un middleware personalizado q revise el token\par
\b0\f1 public class TokenValidationMiddleware\par
\{\par
    private readonly RequestDelegate _next;\par
    private readonly IConfiguration _configuration;\par
\par
    public TokenValidationMiddleware(RequestDelegate next, IConfiguration configuration)\par
    \{\par
        _next = next;\par
        _configuration = configuration;\par
    \}\par
\par
    public async Task InvokeAsync(HttpContext context)\par
    \{\par
        var endpoint = context.GetEndpoint();\par
        if (endpoint != null)\par
        \{\par
            var allowAnonymous = endpoint.Metadata.GetMetadata<IAllowAnonymous>() != null;\par
\par
            if (!allowAnonymous)\par
            \{\par
                var token = context.Request.Headers["Authorization"].ToString().Replace("Bearer ", "");\par
\par
                if (token != null)\par
                \{\par
                    var isValidToken = ValidateToken(token);\par
\par
                    if (!isValidToken)\par
                    \{\par
                        context.Response.StatusCode = StatusCodes.Status401Unauthorized;\par
                        await context.Response.WriteAsync("Invalid Token");\par
                        return;\par
                    \}\par
                \}\par
                else\par
                \{\par
                    context.Response.StatusCode = StatusCodes.Status401Unauthorized;\par
                    await context.Response.WriteAsync("Token is missing");\par
                    return;\par
                \}\par
            \}\par
        \}\par
\par
        await _next(context);\par
    \}\par
\par
    private bool ValidateToken(string token)\par
    \{\par
        var cleaned = token.Replace("\\"", "");\par
        // Verificar si es cadena Base64 v\f2\'e1lida\par
        byte[] encryptedUserBytes;\par
        try\par
        \{\par
            encryptedUserBytes = Convert.FromBase64String(cleaned);\par
        \}\par
        catch (FormatException)\par
        \{\par
            return false;\par
        \}\par
\par
        var decryptedParam = CryptoHelper.Decrypt(cleaned);\par
        var deserialized = JsonConvert.DeserializeObject(decryptedParam);\par
\par
        var tokenHandler = new JwtSecurityTokenHandler();\par
        var key = Encoding.UTF8.GetBytes(_configuration["Jwt:Key"]);\par
\par
        try\par
        \{\par
            tokenHandler.ValidateToken(deserialized.ToString(), new TokenValidationParameters\par
            \{\par
                ValidateIssuerSigningKey = true,\par
                IssuerSigningKey = new SymmetricSecurityKey(key),\par
                ValidateIssuer = true,\par
                ValidIssuer = _configuration["Jwt:Issuer"],\par
                ValidateAudience = true,\par
                ValidAudience = _configuration["Jwt:Audience"],\par
                ValidateLifetime = true,\par
                ClockSkew = TimeSpan.Zero\par
            \}, out SecurityToken validatedToken);\par
\par
            return true;\par
        \}\par
        catch\par
        \{\par
            return false;\par
        \}\par
    \}\par
\}\par
\par
Program.cs\par
\f1 app.UseCors("AllowOrigins");\par
\par
app.UseMiddleware<TokenValidationMiddleware>();\par
\par
app.UseAuthentication();\par
app.UseAuthorization();\par
\par
app.MapControllers();\par
//app.MapFallbackToFile("/index.html");\par
\par
app.Use(async (context, next) =>\par
\{\par
    // Log de la solicitud\par
    Console.WriteLine($"Request: \{context.Request.Method\} \{context.Request.Path\}");\par
    await next.Invoke();\par
\});\par
\par
\f2 En el controlador\par
\f1 [AllowAnonymous]\par
\f0\par
\cf0\fs22\lang10\par
\cf1\fs19\lang9226 /////////////////////////////\par
\par
\par
/////////////////////////////\par
\par
\cf0\fs22\lang10\par
\cf1\fs19\lang9226 /////////////////////////////\par
\par
\cf0\fs22\lang10\par
\cf1\fs19\lang9226 /////////////////////////////\par
\par
\par
/////////////////////////////\par
\par
\cf0\fs22\lang10\par
\cf1\fs19\lang9226 /////////////////////////////\par
\par
\cf0\fs22\lang10\par
\cf1\fs19\lang9226 /////////////////////////////\par
\par
\par
\cf0\fs22\lang10\par
}
 